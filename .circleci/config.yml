version: 2
jobs:
  build:
    docker:
      - image: circleci/python:3.9.6
    
    working_directory: ~/repo
    
    steps:
      - checkout

      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "requirements.txt" }}
          - v2-dependencies-

#       - run:
#           name: Install omp
#           command: |
#                     sudo apt-get install -y libomp-dev
          
      - run:
          name: Install pandoc
          command: |
                    sudo apt-get update 
                    wget https://github.com/jgm/pandoc/releases/download/2.14.1/pandoc-2.14.1-1-amd64.deb
                    sudo dpkg -i pandoc-2.14.1-1-amd64.deb

      - run:
          name: Install tex
          command: |
                    sudo apt-get install -y texlive
                    sudo apt-get install -y texlive-latex-extra
                    sudo apt-get install -y dvipng
          
      - run:
          name: install language package for onnxruntime
          command: |
                    sudo locale-gen

      - run:
          name: Install 7z, unrar
          command: |
                    sudo apt-get install -y p7zip-full
          
      - run:
          name: Install InkScape
          command: |
                    sudo apt-get install -y inkscape
          
      - run:
          name: Install graphviz
          command: |
                    sudo apt-get install -y graphviz

      - run:
          name: Install protobuf-compiler cmake
          command: |
            sudo apt-get install protobuf-compiler libprotoc-dev cmake

      - run:
          name: Install libproj
          command: |
            sudo apt-get install -y libgeos-dev libproj-dev proj-data graphviz

      - run:
          name: Install pyproj, shapely, cartopy
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install pyproj
            pip uninstall -y shapely
            pip install --no-binary shapely shapely
            pip install cartopy

      - run:
          name: Install standard libraries
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install scipy matplotlib numpy cython pandas wheel pybind11 llvmlite numba

      - run:
          name: Install pygame
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install pygame

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v2-dependencies-{{ checksum "requirements.txt" }}
        
      - run:
          name: install sklearn-onnx, onnxconverter-common
          command: |
            . venv/bin/activate
            pip install git+https://github.com/xadupre/onnxconverter-common.git@jenkins --upgrade
            pip install git+https://github.com/xadupre/sklearn-onnx.git@jenkins --upgrade

      - run:
          name: check list of dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip freeze
            apt list --installed
        
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            # pygame
            export AUDIODEV=null	
            export SDL_VIDEODRIVER=dummy	
            export SDL_AUDIODRIVER=disk	
            export DISPLAY=localhost:0.0
            # unittest
            export PYTHONPATH=src
            python setup.py unittests -d 15 -g ".*((LONG)|(SKIP)|(notebook)).*"
          # Some tests take for ever, cutting the list.

      - run:
          name: wheel
          command: |
            . venv/bin/activate
            export PYTHONPATH=src
            python setup.py bdist_wheel
            mkdir -p test-reports/dist
            cp dist/*.whl test-reports/dist
            mkdir -p test-reports/src

#      - run:
#          name: documentation
#          command: |
#           . venv/bin/activate
#           python setup.py build_sphinx
#           
#      - run:
#          name: copy documentation
#          command: |
#           mkdir -p test-reports/doc
#           zip -r -9  test-reports/doc/documentation_html.zip _doc/sphinxdoc/build/html
            
      - store_artifacts:
          path: test-reports
          destination: test-reports
